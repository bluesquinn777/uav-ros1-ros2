#!/usr/bin/env python3
PACKAGE = "parameter"

# 导入 dynamic_reconfigure 功能包中提供的参数生成器
from dynamic_reconfigure.parameter_generator_catkin import *

# 创建一个名为 gen 的参数生成器, 用于下面定义需要动态配置的参数.
gen = ParameterGenerator()

# 生成四类不同类型的参数, 其使用格式如下:
# gen.add(name, type, level, description, default, min, max), 其中:
# * name: 定义的参数名, 注意不能和 C++ 中定义号的变量类型重名;
# * type: 定义的参数的类型, 可以为 int_t, double_t, str_t 和 bool_t;
# * level: 需要传入参数的 动态配置callback函数 中的掩码, 在callback函数中将所有参数的
#   掩码进行修改, 来标识传入的参数已经进行了调整;
# * description: 描述参数信息的字符串;
# * default: 设置参数的默认值;
# * min 和 max: 分别是设置的参数的最小值和最大值, 但因 str_t 和 bool_t 的特性, 对这两
#   类数据不需要进行最值的设置.
gen.add("int_param", int_t, 0, "An Integer parameter show", 50, 0, 100)
gen.add("double_param", double_t, 0, "A double parameter show", 5, 0, 10)
gen.add("str_param", str_t, 0, "A string parameter show", "Hello World!")
gen.add("bool_param", bool_t, 0, "A boolean parameter show", False)

# 生成一个枚举类型的参数, 该参数名为"size", 类型为 int_t. 通过 gen.enum() 来定义
# 一个枚举并将其传递给常量列表, 而每一个枚举值的名称, 类型, 取值及描述则由 gen.const()
# 来初始化. size 参数的值由定义的枚举来赋值.
size_enum = gen.enum([
        gen.const("Stop", int_t, 0, "A stop speed"),
        gen.const("Low_speed", int_t, 1, "A low drive speed"),
        gen.const("Medium_speed", int_t, 2, "A medium drive speed"),
        gen.const("Fast_speed", int_t, 3, "An fast drive speed")
    ], "An enum to set size")
gen.add("size", int_t, 0, "A size parameter which is edited via an enum",
        1, 0, 3, edit_method=size_enum)

# 生成必要文件并退出, 其中, 第一个参数是该功能包名, 第二个参数表示动态参数运行的节点名
# 及自己服务端程序中初始化的节点名. 第三个参数是生成文件使用的前缀, 需要和配置文件名相同,
# 最终生成的文件名为 TutorialsConfig.h.
exit(gen.generate(PACKAGE, "dynamic_parameter", "Tutorials"))